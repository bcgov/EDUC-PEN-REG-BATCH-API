UPDATE PEN_REQUEST_BATCH_STUDENT_STATUS_CODE SET PEN_REQUEST_BATCH_STUDENT_STATUS_CODE='MATCHEDUSR' WHERE PEN_REQUEST_BATCH_STUDENT_STATUS_CODE = 'USRMATCHED';
UPDATE PEN_REQUEST_BATCH_STUDENT_STATUS_CODE SET PEN_REQUEST_BATCH_STUDENT_STATUS_CODE='NEWPENUSR' WHERE PEN_REQUEST_BATCH_STUDENT_STATUS_CODE = 'USRNEWPEN';

INSERT INTO PEN_REQUEST_BATCH_STUDENT_STATUS_CODE (PEN_REQUEST_BATCH_STUDENT_STATUS_CODE, LABEL, DESCRIPTION,
                                                   DISPLAY_ORDER, EFFECTIVE_DATE, EXPIRY_DATE, CREATE_USER, CREATE_DATE,
                                                   UPDATE_USER, UPDATE_DATE)
VALUES ('INFOREQ',
        'Info requested',
        'Request returned to the school for additional details needed to process the request',
        7,
        to_date('2020-01-01', 'YYYY-MM-DD'),
        to_date('2099-12-31', 'YYYY-MM-DD'),
        'IDIR/MINYANG',
        to_date('2020-10-22', 'YYYY-MM-DD'),
        'IDIR/MINYANG',
        to_date('2020-10-22', 'YYYY-MM-DD'));


CREATE TABLE PEN_REQUEST_BATCH_EVENT
(
    EVENT_ID      RAW(16)                             NOT NULL,
    EVENT_PAYLOAD VARCHAR2(4000)                      NOT NULL,
    EVENT_STATUS  VARCHAR2(50)                        NOT NULL,
    EVENT_TYPE    VARCHAR2(100)                       NOT NULL,
    SAGA_ID       RAW(16),
    EVENT_OUTCOME VARCHAR2(100)                       NOT NULL,
    REPLY_CHANNEL VARCHAR2(100),
    CREATE_USER   VARCHAR(32)                         NOT NULL,
    CREATE_DATE   TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATE_USER   VARCHAR(32)                         NOT NULL,
    UPDATE_DATE   TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PEN_REQUEST_BATCH_EVENT_PK PRIMARY KEY (EVENT_ID)
);
CREATE INDEX PEN_REQUEST_BATCH_EVENT_EVENT_STATUS_IDX ON PEN_REQUEST_BATCH_EVENT (EVENT_STATUS);
CREATE INDEX PEN_REQUEST_BATCH_EVENT_SAGA_ID_IDX ON PEN_REQUEST_BATCH_EVENT (SAGA_ID);
CREATE INDEX PEN_REQUEST_BATCH_EVENT_EVENT_TYPE_IDX ON PEN_REQUEST_BATCH_EVENT (EVENT_TYPE);

COMMENT ON TABLE PEN_REQUEST_BATCH_EVENT IS 'This table achieves the events sent to messaging system by EventPoller.';
COMMENT ON COLUMN PEN_REQUEST_BATCH_EVENT.EVENT_ID IS 'The unique ID of event.';
COMMENT ON COLUMN PEN_REQUEST_BATCH_EVENT.EVENT_PAYLOAD IS 'The payload of event.';
COMMENT ON COLUMN PEN_REQUEST_BATCH_EVENT.EVENT_STATUS IS 'The status of event: DB_COMMITTED, MESSAGE_PUBLISHED.';
COMMENT ON COLUMN PEN_REQUEST_BATCH_EVENT.EVENT_TYPE IS 'The type of event.';
COMMENT ON COLUMN PEN_REQUEST_BATCH_EVENT.SAGA_ID IS 'The unique ID of saga.';
COMMENT ON COLUMN PEN_REQUEST_BATCH_EVENT.EVENT_OUTCOME IS 'The outcome of processing event.';
COMMENT ON COLUMN PEN_REQUEST_BATCH_EVENT.REPLY_CHANNEL IS 'The topic where the event will be sent.';