#Keycloak/OAuth properties
security.oauth2.resource.jwt.key-value=${KEYCLOAK_PUBLIC_KEY}

#logging Properties
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${HIBERNATE_SQL_PARAM_LOG_LEVEL}
logging.level.org.springframework.security=${SPRING_SECURITY_LOG_LEVEL}
logging.level.org.springframework.web=${SPRING_WEB_LOG_LEVEL}
logging.level.ca.bc.gov.educ.penreg=${APP_LOG_LEVEL}
logging.level.org.springframework.boot.autoconfigure.logging=${SPRING_BOOT_AUTOCONFIG_LOG_LEVEL}
spring.mvc.log-request-details=${SPRING_SHOW_REQUEST_DETAILS}
logging.pattern.console=%d | [${HOSTNAME}] | %clr(%5p) | [%t] | [%logger{36}:%L] | [%M] | %msg%n

#DB Properties
spring.datasource.url=${JDBC_URL}
spring.datasource.username=${ORACLE_USERNAME}
spring.datasource.password=${ORACLE_PASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.hibernate.ddl-auto=none

spring.jackson.deserialization.fail-on-unknown-properties=false
management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
spring.jpa.properties.hibernate.generate_statistics=false
spring.datasource.hikari.max-lifetime=120000
spring.jmx.enabled=false
spring.flyway.baseline-on-migrate=true
spring.flyway.table=FLYWAY_SCHEMA_HISTORY
spring.flyway.baseline-version=0
spring.flyway.enabled=true
logging.file.name=/logs/app.log
logging.logback.rollingpolicy.max-file-size=20MB
logging.logback.rollingpolicy.clean-history-on-start=true
logging.logback.rollingpolicy.max-history=1
logging.pattern.file=%d | [${HOSTNAME}] | %clr(%5p) | [%t] | [%logger{36}:%L] | [%M] | %msg%n
server.undertow.threads.io=16
server.undertow.threads.worker=128

# <p>Example patterns:
# <ul>
# <li>"0 0 * * * *" = the top of every hour of every day.</li>
# <li>"*&#47;10 * * * * *" = every ten seconds.</li>
# <li>"0 0 8-10 * * *" = 8, 9 and 10 o'clock of every day.</li>
# <li>"0 0 6,19 * * *" = 6:00 AM and 7:00 PM every day.</li>
# <li>"0 0/30 8-10 * * *" = 8:00, 8:30, 9:00, 9:30, 10:00 and 10:30 every day.</li>
# <li>"0 0 9-17 * * MON-FRI" = on the hour nine-to-five weekdays</li>
# <li>"0 0 0 25 12 ?" = every Christmas Day at midnight</li>
#	 */
scheduled.jobs.extract.unprocessed.pen.web.blobs.cron=${SCHEDULED_JOBS_EXTRACT_UNPROCESSED_PEN_WEB_BLOBS_CRON}

#Need to make sure that this value is set properly based on the above value of cron expression.
#EX: If the cron is set to run every 10 minutes, make sure this is set to 9 minutes
scheduled.jobs.extract.unprocessed.pen.web.blobs.cron.lockAtLeastFor=${SCHEDULED_JOBS_EXTRACT_UNPROCESSED_PEN_WEB_BLOBS_CRON_LOCK_AT_LEAST_FOR}

#Need to make sure that this value is set properly based on the above value of cron expression.
#EX: If the cron is set to run every 10 minutes, make sure this is set to 9 minutes 55 Seconds.
scheduled.jobs.extract.unprocessed.pen.web.blobs.cron.lockAtMostFor=${SCHEDULED_JOBS_EXTRACT_UNPROCESSED_PEN_WEB_BLOBS_CRON_LOCK_AT_MOST_FOR}

#This is required to map long raw, please see below links, even if hibernate documentation mentions {hibernate.dialect.oracle.prefer_longvarbinary}
# this as the property name, it is not correct.
#https://hibernate.atlassian.net/browse/HHH-10345
#https://in.relation.to/2016/02/17/hibernate-orm-508-final-release/
spring.jpa.properties.hibernate.dialect.oracle.prefer_long_raw=true

#Print the queries
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL}

##Be careful when changing below values in config map....
scheduled.jobs.extract.uncompleted.sagas.cron=${SCHEDULED_JOBS_EXTRACT_UNCOMPLETED_SAGAS_CRON}
scheduled.jobs.extract.uncompleted.sagas.cron.lockAtLeastFor=${SCHEDULED_JOBS_EXTRACT_UNCOMPLETED_SAGAS_CRON_LOCK_AT_LEAST_FOR}
scheduled.jobs.extract.uncompleted.sagas.cron.lockAtMostFor=${SCHEDULED_JOBS_EXTRACT_UNCOMPLETED_SAGAS_CRON_LOCK_AT_MOST_FOR}
scheduled.jobs.extract.unprocessed.students.cron=${SCHEDULED_JOBS_EXTRACT_UNPROCESSED_STUDENTS_CRON}
scheduled.jobs.extract.unprocessed.students.cron.lockAtLeastFor=${SCHEDULED_JOBS_EXTRACT_UNPROCESSED_STUDENTS_CRON_LOCK_AT_LEAST_FOR}
scheduled.jobs.extract.unprocessed.students.cron.lockAtMostFor=${SCHEDULED_JOBS_EXTRACT_UNPROCESSED_STUDENTS_CRON_LOCK_AT_MOST_FOR}
spring.jpa.open-in-view=false
#This is used to run redis in local without cluster mode, in application-local.properties change this to local

#Add Redis cluster node address. Use follow format -- <code>host:port</code>. since it is a service in OS, we just give one entry.

#Client details to get token to make api calls.
client.id=${CLIENT_ID}
client.secret=${CLIENT_SECRET}
url.token=${TOKEN_URL}

#Below are for making API calls to Student after getting the token.
url.api.student=${STUDENT_API_URL}
url.api.pen.services=${PEN_SERVICES_API_URL}
url.api.school=${SCHOOL_API_URL}
#How many days after processing a batch request is considered a repeat
repeat.time.window.psi=${REPEAT_TIME_WINDOW_PSI}
repeat.time.window.k12=${REPEAT_TIME_WINDOW_K12}

spring.datasource.hikari.maximum-pool-size=${SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE}
spring.datasource.hikari.minimum-idle=${SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE}
nats.spring.server=${NATS_URL}
nats.spring.max-reconnect=${NATS_MAX_RECONNECT}
nats.spring.connection-name=pen-reg-batch-api
nats.spring.connection-timeout=10000
nats.spring.ping-interval=5000
purge.records.saga.after.days=${PURGE_RECORDS_SAGA_AFTER_DAYS}
scheduled.jobs.purge.old.saga.records.cron=${SCHEDULED_JOBS_PURGE_OLD_SAGA_RECORDS_CRON}
